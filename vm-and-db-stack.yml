Parameters:
  NetworkStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: training
  ServerJarFileUrl:
    Type: String
    Default: "NOPE"
  DBPass:
    Type: String
    Default: "admin123"

AWSTemplateFormatVersion: '2010-09-09'
Description: "VM and DB stack"
Resources:
  ServerAEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: 'eu-central-1a'
      KeyName: training-key-pair # TODO: Might be disabled when System Manager is configured
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeSize: 8 # in GB
      ImageId: 'ami-03c3a7e4263fd998c' # Amazon Linux 2 AMI (64-bit x86)
      InstanceType: 't3.micro'
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          PrivateIpAddress: '10.0.1.4'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PrivSubnetA2"
          DeviceIndex: '0'
          Description: 'Primary network interface'
          GroupSet:
            - !Ref ServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo amazon-linux-extras enable corretto8
          sudo yum clean metadata -y
          sudo yum install java-11-amazon-corretto -y
          # sudo wget ${ServerJarFileUrl}
      Tags:
        - Key: Name
          Value: ServerAEC2

  ClientAEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: 'eu-central-1a'
      KeyName: training-key-pair # TODO: Might be disabled when System Manager is configured
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeSize: 8 # in GB
      ImageId: 'ami-03c3a7e4263fd998c' # Amazon Linux 2 AMI (64-bit x86)
      InstanceType: 't3.micro'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true # TODO: Might be disabled when System Manager is configured
          PrivateIpAddress: '10.0.0.4'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PubSubnetA2"
          DeviceIndex: '0'
          Description: 'Primary network interface'
          GroupSet:
            - !Ref ClientSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # TODO: Uncomment
          #curl --silent --location https://rpm.nodesource.com/setup_13.x | sudo bash &&
          #sudo yum -y install nodejs &&
          #sudo yum install git -y

      Tags:
        - Key: Name
          Value: ClientAEC2


  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Server security group'
      GroupName: 'ServerSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0' # TODO: Might be disabled when System Manager is configured
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'ServerSecurityGroup'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"

  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Client security group'
      GroupName: 'ClientSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0' # TODO: Might be disabled when System Manager is configured
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: TCP
          FromPort: 5000
          ToPort: 5000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'ClientSecurityGroup'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0 # default: 1
      CopyTagsToSnapshot: true # default: false
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: usermanagerdb
      DBName: 'UserManagerDB'
      DBSubnetGroupName: 'DBSubnetGroup'
      Engine: 'mysql'
      EngineVersion: '8.0.20'
      LicenseModel: 'general-public-license'
      MasterUsername: 'admin'
      MasterUserPassword: "${DBPass}"
      MaxAllocatedStorage: 1000 # Disable auto-scaling?
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Ref: DBSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DBSubnetGroup for RDS MySql instance"
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-PrivSubnetA2"
        - Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-PrivSubnetB2"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'DB security group'
      GroupName: 'UserManagerDBSg'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ServerSecurityGroup
          IpProtocol: TCP
          FromPort: 3306
          ToPort: 3306
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'UserManagerDBSg'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"

  ServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /users
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Name: ServerTG
      TargetType: instance
      Targets:
        - Id: !Ref ServerAEC2
          Port: 8080
#        - Id: !Ref ServerBEC2
#          Port: 8080
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"

  ClientTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Port: 5000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Name: ClientTG
      TargetType: instance
      Targets:
        - Id: !Ref ClientAEC2
          Port: 5000
      #        - Id: !Ref ClientBEC2
      #          Port: 5000
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'LB security group'
      GroupName: 'LoadBalancerSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
        - CidrIp: '0.0.0.0/0'
          IpProtocol: TCP
          FromPort: 5000
          ToPort: 5000
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1 # Allow all
      Tags:
        - Key: 'Name'
          Value: 'LoadBalancerSecurityGroup'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VpcId"


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: UserManagerLB2
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application
      Subnets:
        - Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PubSubnetA2"
        - Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PubSubnetB2"

  LBClientListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroupStickinessConfig:
              Enabled: false
            TargetGroups:
              - TargetGroupArn: !Ref ClientTG
                Weight: 1
          TargetGroupArn: !Ref ClientTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5000
      Protocol: "HTTP"

  LBServerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroupStickinessConfig:
              Enabled: false
            TargetGroups:
              - TargetGroupArn: !Ref ServerTG
                Weight: 1
          TargetGroupArn: !Ref ServerTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: "HTTP"
